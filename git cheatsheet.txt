
------------------------------------------
Initializing and Setting Up a Repository:
------------------------------------------
0. Show the status of the repository:
   git status

1. Initialize a new Git repository:
   git init

2. Add a remote repository (origin):
   git remote add origin <repository_url>

3. Add all changes for staging:
   git add .

4. Commit changes with a message:
   git commit -m "commit message"
   
   #long commit msg
   git commit 
   ^x to escape

5. Push changes to the remote repository:
   git push -u origin <master;branch_name>
   git push -u origin <branch_name>

6. View repository history graph:
   git log --graph --oneline --all


------------------------------------------
Undoing Changes:
------------------------------------------
- Unstage changes from the staging area (after git add):
  git reset HEAD <file_name>

- undo a git commit with a new commmit ("reverts" the changes back to the state before the commit being reverted):
  git log
  git revert <commit_hash>

- deleting a file in remote
  rm <file_name>  
  git add .
  git commit -m "Delete <file_name>"


------------------------------------------
Pulling 
------------------------------------------

- Pull changes from the remote repository:
  git pull origin <branch_name>


------------------------------------------
Branching and Merging:
------------------------------------------

- Create a new branch:
  git branch <branch_name>

- Switch to a branch:
  git checkout <branch_name>

- Create and switch to a new branch:
  git checkout -b <new_branch_name>

- Merge a branch into the current branch:
  git merge <branch_to_merge>
  
  git checkout -b feature
  git add .
  git commit -m "Add feature changes"
  git checkout main
  git merge feature (merge feature into main, feature branch will still exist)
  git commit -m "Merge feature into main"
  git push -u origin master


- Delete a branch (locally):
  git branch -d <branch_name>  #good idea after a merge to main/master

- Delete a branch (remotely):
  git push origin --delete <branch_name>


------------------------------------------
Centralized Workflow: linear
------------------------------------------
- central bare repo created on server
ssh user@host git init --bare /path/to/repo.git

- every member clones
git clone ssh://user@host/path/to/repo.git


**Fetch updates from central and rebase your changes**
- someone has pushed changes and thus local history has diverged from the central repository
- you need to pull the upstream
- rebase option tells Git to move your commits to the tip of the main branch after sync-ing changes from central repo

                    origin/main
central o--o--o-----o--o----
                 \          \
local             X--o--o     ----o---o  < local added to tip instead
                       ^
                       local main


git pull --rebase origin main


**Conflict from 2 pax working on unrelated feature**
- git will pause the rebase at current commit and output following message:
CONFLICT (content): Merge conflict in <some-file>

git status #see where the problem is
EDIT FILE
git add <EDITED FILE>
git rebase --continue


**Panic mode: you dont know what is going on**
git rebase --abort

